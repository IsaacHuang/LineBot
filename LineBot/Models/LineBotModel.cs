

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "LineBot\Web.config"
//     Connection String Name: "LineBotContext"
//     Connection String:      "Server=tcp:linechattingbot.database.windows.net,1433;Initial Catalog=linebot;Persist Security Info=False;User ID=linechattingbot;password=**zapped**;;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
// ------------------------------------------------------------------------------------------------
// Database Edition        : SQL Azure
// Database Engine Edition : Azure
// Database Version        : 12.0.2000.8

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace LineBot.Models
{
    using System.Linq;

    #region Unit of work

    public interface ILineBotContext : System.IDisposable
    {
        System.Data.Entity.DbSet<CatContentMapping> CatContentMappings { get; set; } // CatContentMapping
        System.Data.Entity.DbSet<Category> Categories { get; set; } // Category
        System.Data.Entity.DbSet<Content> Contents { get; set; } // Content
        System.Data.Entity.DbSet<MessageLog> MessageLogs { get; set; } // MessageLog
        System.Data.Entity.DbSet<sys_DatabaseFirewallRule> sys_DatabaseFirewallRules { get; set; } // database_firewall_rules

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        // Stored Procedures
        int SpAlterdiagram(string diagramname, int? ownerId, int? version, byte[] definition);
        // SpAlterdiagramAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpCreatediagram(string diagramname, int? ownerId, int? version, byte[] definition);
        // SpCreatediagramAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpDropdiagram(string diagramname, int? ownerId);
        // SpDropdiagramAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<SpHelpdiagramdefinitionReturnModel> SpHelpdiagramdefinition(string diagramname, int? ownerId);
        System.Collections.Generic.List<SpHelpdiagramdefinitionReturnModel> SpHelpdiagramdefinition(string diagramname, int? ownerId, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpHelpdiagramdefinitionReturnModel>> SpHelpdiagramdefinitionAsync(string diagramname, int? ownerId);

        System.Collections.Generic.List<SpHelpdiagramsReturnModel> SpHelpdiagrams(string diagramname, int? ownerId);
        System.Collections.Generic.List<SpHelpdiagramsReturnModel> SpHelpdiagrams(string diagramname, int? ownerId, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<SpHelpdiagramsReturnModel>> SpHelpdiagramsAsync(string diagramname, int? ownerId);

        int SpRenamediagram(string diagramname, int? ownerId, string newDiagramname);
        // SpRenamediagramAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        int SpUpgraddiagrams();
        // SpUpgraddiagramsAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class LineBotContext : System.Data.Entity.DbContext, ILineBotContext
    {
        public System.Data.Entity.DbSet<CatContentMapping> CatContentMappings { get; set; } // CatContentMapping
        public System.Data.Entity.DbSet<Category> Categories { get; set; } // Category
        public System.Data.Entity.DbSet<Content> Contents { get; set; } // Content
        public System.Data.Entity.DbSet<MessageLog> MessageLogs { get; set; } // MessageLog
        public System.Data.Entity.DbSet<sys_DatabaseFirewallRule> sys_DatabaseFirewallRules { get; set; } // database_firewall_rules

        static LineBotContext()
        {
            System.Data.Entity.Database.SetInitializer<LineBotContext>(null);
        }

        public LineBotContext()
            : base("Name=LineBotContext")
        {
        }

        public LineBotContext(string connectionString)
            : base(connectionString)
        {
        }

        public LineBotContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public LineBotContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public LineBotContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new CatContentMappingConfiguration());
            modelBuilder.Configurations.Add(new CategoryConfiguration());
            modelBuilder.Configurations.Add(new ContentConfiguration());
            modelBuilder.Configurations.Add(new MessageLogConfiguration());
            modelBuilder.Configurations.Add(new sys_DatabaseFirewallRuleConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new CatContentMappingConfiguration(schema));
            modelBuilder.Configurations.Add(new CategoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ContentConfiguration(schema));
            modelBuilder.Configurations.Add(new MessageLogConfiguration(schema));
            modelBuilder.Configurations.Add(new sys_DatabaseFirewallRuleConfiguration(schema));
            return modelBuilder;
        }

        // Stored Procedures
        public int SpAlterdiagram(string diagramname, int? ownerId, int? version, byte[] definition)
        {
            var diagramnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@diagramname", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = diagramname, Size = 128 };
            if (diagramnameParam.Value == null)
                diagramnameParam.Value = System.DBNull.Value;

            var ownerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@owner_id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = ownerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!ownerId.HasValue)
                ownerIdParam.Value = System.DBNull.Value;

            var versionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@version", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = version.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!version.HasValue)
                versionParam.Value = System.DBNull.Value;

            var definitionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@definition", SqlDbType = System.Data.SqlDbType.VarBinary, Direction = System.Data.ParameterDirection.Input, Value = definition, Size = -1 };
            if (definitionParam.Value == null)
                definitionParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_alterdiagram] @diagramname, @owner_id, @version, @definition", diagramnameParam, ownerIdParam, versionParam, definitionParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int SpCreatediagram(string diagramname, int? ownerId, int? version, byte[] definition)
        {
            var diagramnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@diagramname", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = diagramname, Size = 128 };
            if (diagramnameParam.Value == null)
                diagramnameParam.Value = System.DBNull.Value;

            var ownerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@owner_id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = ownerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!ownerId.HasValue)
                ownerIdParam.Value = System.DBNull.Value;

            var versionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@version", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = version.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!version.HasValue)
                versionParam.Value = System.DBNull.Value;

            var definitionParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@definition", SqlDbType = System.Data.SqlDbType.VarBinary, Direction = System.Data.ParameterDirection.Input, Value = definition, Size = -1 };
            if (definitionParam.Value == null)
                definitionParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_creatediagram] @diagramname, @owner_id, @version, @definition", diagramnameParam, ownerIdParam, versionParam, definitionParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int SpDropdiagram(string diagramname, int? ownerId)
        {
            var diagramnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@diagramname", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = diagramname, Size = 128 };
            if (diagramnameParam.Value == null)
                diagramnameParam.Value = System.DBNull.Value;

            var ownerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@owner_id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = ownerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!ownerId.HasValue)
                ownerIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_dropdiagram] @diagramname, @owner_id", diagramnameParam, ownerIdParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<SpHelpdiagramdefinitionReturnModel> SpHelpdiagramdefinition(string diagramname, int? ownerId)
        {
            int procResult;
            return SpHelpdiagramdefinition(diagramname, ownerId, out procResult);
        }

        public System.Collections.Generic.List<SpHelpdiagramdefinitionReturnModel> SpHelpdiagramdefinition(string diagramname, int? ownerId, out int procResult)
        {
            var diagramnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@diagramname", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = diagramname, Size = 128 };
            if (diagramnameParam.Value == null)
                diagramnameParam.Value = System.DBNull.Value;

            var ownerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@owner_id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = ownerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!ownerId.HasValue)
                ownerIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpHelpdiagramdefinitionReturnModel>("EXEC @procResult = [dbo].[sp_helpdiagramdefinition] @diagramname, @owner_id", diagramnameParam, ownerIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpHelpdiagramdefinitionReturnModel>> SpHelpdiagramdefinitionAsync(string diagramname, int? ownerId)
        {
            var diagramnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@diagramname", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = diagramname, Size = 128 };
            if (diagramnameParam.Value == null)
                diagramnameParam.Value = System.DBNull.Value;

            var ownerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@owner_id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = ownerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!ownerId.HasValue)
                ownerIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpHelpdiagramdefinitionReturnModel>("EXEC [dbo].[sp_helpdiagramdefinition] @diagramname, @owner_id", diagramnameParam, ownerIdParam).ToListAsync();

            return procResultData;
        }

        public System.Collections.Generic.List<SpHelpdiagramsReturnModel> SpHelpdiagrams(string diagramname, int? ownerId)
        {
            int procResult;
            return SpHelpdiagrams(diagramname, ownerId, out procResult);
        }

        public System.Collections.Generic.List<SpHelpdiagramsReturnModel> SpHelpdiagrams(string diagramname, int? ownerId, out int procResult)
        {
            var diagramnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@diagramname", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = diagramname, Size = 128 };
            if (diagramnameParam.Value == null)
                diagramnameParam.Value = System.DBNull.Value;

            var ownerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@owner_id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = ownerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!ownerId.HasValue)
                ownerIdParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpHelpdiagramsReturnModel>("EXEC @procResult = [dbo].[sp_helpdiagrams] @diagramname, @owner_id", diagramnameParam, ownerIdParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpHelpdiagramsReturnModel>> SpHelpdiagramsAsync(string diagramname, int? ownerId)
        {
            var diagramnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@diagramname", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = diagramname, Size = 128 };
            if (diagramnameParam.Value == null)
                diagramnameParam.Value = System.DBNull.Value;

            var ownerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@owner_id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = ownerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!ownerId.HasValue)
                ownerIdParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpHelpdiagramsReturnModel>("EXEC [dbo].[sp_helpdiagrams] @diagramname, @owner_id", diagramnameParam, ownerIdParam).ToListAsync();

            return procResultData;
        }

        public int SpRenamediagram(string diagramname, int? ownerId, string newDiagramname)
        {
            var diagramnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@diagramname", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = diagramname, Size = 128 };
            if (diagramnameParam.Value == null)
                diagramnameParam.Value = System.DBNull.Value;

            var ownerIdParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@owner_id", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = ownerId.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!ownerId.HasValue)
                ownerIdParam.Value = System.DBNull.Value;

            var newDiagramnameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@new_diagramname", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = newDiagramname, Size = 128 };
            if (newDiagramnameParam.Value == null)
                newDiagramnameParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_renamediagram] @diagramname, @owner_id, @new_diagramname", diagramnameParam, ownerIdParam, newDiagramnameParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public int SpUpgraddiagrams()
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[sp_upgraddiagrams] ", procResultParam);

            return (int) procResultParam.Value;
        }

    }
    #endregion

    #region Database context factory

    public class LineBotContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<LineBotContext>
    {
        public LineBotContext Create()
        {
            return new LineBotContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class FakeLineBotContext : ILineBotContext
    {
        public System.Data.Entity.DbSet<CatContentMapping> CatContentMappings { get; set; }
        public System.Data.Entity.DbSet<Category> Categories { get; set; }
        public System.Data.Entity.DbSet<Content> Contents { get; set; }
        public System.Data.Entity.DbSet<MessageLog> MessageLogs { get; set; }
        public System.Data.Entity.DbSet<sys_DatabaseFirewallRule> sys_DatabaseFirewallRules { get; set; }

        public FakeLineBotContext()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            CatContentMappings = new FakeDbSet<CatContentMapping>("Id");
            Categories = new FakeDbSet<Category>("Id");
            Contents = new FakeDbSet<Content>("Id");
            MessageLogs = new FakeDbSet<MessageLog>("Id");
            sys_DatabaseFirewallRules = new FakeDbSet<sys_DatabaseFirewallRule>("Id", "Name", "StartIpAddress", "EndIpAddress", "CreateDate", "ModifyDate");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }


        // Stored Procedures
        public int SpAlterdiagram(string diagramname, int? ownerId, int? version, byte[] definition)
        {

            return 0;
        }

        public int SpCreatediagram(string diagramname, int? ownerId, int? version, byte[] definition)
        {

            return 0;
        }

        public int SpDropdiagram(string diagramname, int? ownerId)
        {

            return 0;
        }

        public System.Collections.Generic.List<SpHelpdiagramdefinitionReturnModel> SpHelpdiagramdefinition(string diagramname, int? ownerId)
        {
            int procResult;
            return SpHelpdiagramdefinition(diagramname, ownerId, out procResult);
        }

        public System.Collections.Generic.List<SpHelpdiagramdefinitionReturnModel> SpHelpdiagramdefinition(string diagramname, int? ownerId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpHelpdiagramdefinitionReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpHelpdiagramdefinitionReturnModel>> SpHelpdiagramdefinitionAsync(string diagramname, int? ownerId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpHelpdiagramdefinition(diagramname, ownerId, out procResult));
        }

        public System.Collections.Generic.List<SpHelpdiagramsReturnModel> SpHelpdiagrams(string diagramname, int? ownerId)
        {
            int procResult;
            return SpHelpdiagrams(diagramname, ownerId, out procResult);
        }

        public System.Collections.Generic.List<SpHelpdiagramsReturnModel> SpHelpdiagrams(string diagramname, int? ownerId, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<SpHelpdiagramsReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<SpHelpdiagramsReturnModel>> SpHelpdiagramsAsync(string diagramname, int? ownerId)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(SpHelpdiagrams(diagramname, ownerId, out procResult));
        }

        public int SpRenamediagram(string diagramname, int? ownerId, string newDiagramname)
        {

            return 0;
        }

        public int SpUpgraddiagrams()
        {

            return 0;
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            var m = expression as System.Linq.Expressions.MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it shoud be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) System.Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>)System.Activator.CreateInstance(queryType, expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // CatContentMapping
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class CatContentMapping
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public System.Guid CategoryId { get; set; } // CategoryID
        public System.Guid ContentId { get; set; } // ContentID
    }

    // Category
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class Category
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public string Title { get; set; } // Title (length: 50)
        public string CatKeyword { get; set; } // CatKeyword
    }

    // Content
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class Content
    {
        public System.Guid Id { get; set; } // ID (Primary key)
        public string Title { get; set; } // Title (length: 50)
        public string ContentKeyword { get; set; } // ContentKeyword
        public int? HotLevel { get; set; } // HotLevel
        public string Message { get; set; } // Message
        public string Url { get; set; } // Url
        public string ImageUrl { get; set; } // ImageUrl
        public System.DateTime? CreateTime { get; set; } // CreateTime
    }

    // MessageLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class MessageLog
    {
        public int Id { get; set; } // ID (Primary key)
        public System.Guid? MappingId { get; set; } // MappingID
        public System.Guid? ContentId { get; set; } // ContentID
        public System.DateTime SendDatetime { get; set; } // SendDatetime
        public string UserId { get; set; } // UserID
        public string KeyWord { get; set; } // KeyWord (length: 50)

        public MessageLog()
        {
            SendDatetime = System.DateTime.Now;
        }
    }

    // database_firewall_rules
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class sys_DatabaseFirewallRule
    {
        public int Id { get; set; } // id (Primary key)
        public string Name { get; set; } // name (Primary key) (length: 128)
        public string StartIpAddress { get; set; } // start_ip_address (Primary key) (length: 45)
        public string EndIpAddress { get; set; } // end_ip_address (Primary key) (length: 45)
        public System.DateTime CreateDate { get; set; } // create_date (Primary key)
        public System.DateTime ModifyDate { get; set; } // modify_date (Primary key)
    }

    #endregion

    #region POCO Configuration

    // CatContentMapping
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class CatContentMappingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<CatContentMapping>
    {
        public CatContentMappingConfiguration()
            : this("dbo")
        {
        }

        public CatContentMappingConfiguration(string schema)
        {
            ToTable("CatContentMapping", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CategoryId).HasColumnName(@"CategoryID").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.ContentId).HasColumnName(@"ContentID").HasColumnType("uniqueidentifier").IsRequired();
        }
    }

    // Category
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class CategoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Category>
    {
        public CategoryConfiguration()
            : this("dbo")
        {
        }

        public CategoryConfiguration(string schema)
        {
            ToTable("Category", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.CatKeyword).HasColumnName(@"CatKeyword").HasColumnType("nvarchar(max)").IsOptional();
        }
    }

    // Content
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class ContentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Content>
    {
        public ContentConfiguration()
            : this("dbo")
        {
        }

        public ContentConfiguration(string schema)
        {
            ToTable("Content", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar").IsRequired().HasMaxLength(50);
            Property(x => x.ContentKeyword).HasColumnName(@"ContentKeyword").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.HotLevel).HasColumnName(@"HotLevel").HasColumnType("int").IsOptional();
            Property(x => x.Message).HasColumnName(@"Message").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Url).HasColumnName(@"Url").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.ImageUrl).HasColumnName(@"ImageUrl").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.CreateTime).HasColumnName(@"CreateTime").HasColumnType("datetime").IsOptional();
        }
    }

    // MessageLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class MessageLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<MessageLog>
    {
        public MessageLogConfiguration()
            : this("dbo")
        {
        }

        public MessageLogConfiguration(string schema)
        {
            ToTable("MessageLog", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.MappingId).HasColumnName(@"MappingID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.ContentId).HasColumnName(@"ContentID").HasColumnType("uniqueidentifier").IsOptional();
            Property(x => x.SendDatetime).HasColumnName(@"SendDatetime").HasColumnType("datetime").IsRequired();
            Property(x => x.UserId).HasColumnName(@"UserID").HasColumnType("nvarchar(max)").IsRequired();
            Property(x => x.KeyWord).HasColumnName(@"KeyWord").HasColumnType("nvarchar").IsOptional().HasMaxLength(50);
        }
    }

    // database_firewall_rules
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class sys_DatabaseFirewallRuleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<sys_DatabaseFirewallRule>
    {
        public sys_DatabaseFirewallRuleConfiguration()
            : this("sys")
        {
        }

        public sys_DatabaseFirewallRuleConfiguration(string schema)
        {
            ToTable("database_firewall_rules", schema);
            HasKey(x => new { x.Id, x.Name, x.StartIpAddress, x.EndIpAddress, x.CreateDate, x.ModifyDate });

            Property(x => x.Id).HasColumnName(@"id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Name).HasColumnName(@"name").HasColumnType("nvarchar").IsRequired().HasMaxLength(128).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.StartIpAddress).HasColumnName(@"start_ip_address").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(45).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EndIpAddress).HasColumnName(@"end_ip_address").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(45).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CreateDate).HasColumnName(@"create_date").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ModifyDate).HasColumnName(@"modify_date").HasColumnType("datetime").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    #endregion

    #region Stored procedure return models

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class SpHelpdiagramdefinitionReturnModel
    {
        public System.Int32? version { get; set; }
        public System.Byte[] definition { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class SpHelpdiagramsReturnModel
    {
        public System.String Database { get; set; }
        public System.String Name { get; set; }
        public System.Int32 ID { get; set; }
        public System.String Owner { get; set; }
        public System.Int32 OwnerID { get; set; }
    }

    #endregion

}
// </auto-generated>

